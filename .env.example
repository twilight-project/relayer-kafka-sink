# ==============================================================================
# Relayer Kafka Sink Configuration
# ==============================================================================
# This file contains all environment variables needed to configure the 
# relayer-kafka-sink service. Copy this file to .env and set your values.

# ==============================================================================
# POSTGRESQL CONFIGURATION
# ==============================================================================

# PostgreSQL connection URL (REQUIRED)
# Format: postgresql://username:password@host:port/database_name
# The database must exist and the user must have read/write permissions
# The service will automatically create the required tables:
# - rpc_query (for CLIENT-REQUEST topic)
# - rpc_query_failed (for CLIENT-FAILED-REQUEST topic)  
# - event_logs (for CoreEventLogTopic)
# - relayer_state_queue (for RelayerStateQueue topic)
POSTGRESQL_URL=postgresql://username:password@localhost:5432/database_name

# ==============================================================================
# KAFKA BROKER CONFIGURATION
# ==============================================================================

# Kafka broker address (OPTIONAL)
# Default: localhost:9092
# Can be a single broker or comma-separated list for cluster setup
# Example: broker1:9092,broker2:9092,broker3:9092
KAFKA_BROKER=localhost:9092

# ==============================================================================
# KAFKA TOPIC CONFIGURATION
# ==============================================================================
# These topics define where the service consumes different types of data from.
# If not specified, the service will use the default topic names.

# RPC client request topic (OPTIONAL)
# Default: CLIENT-REQUEST
# Contains successful RPC command requests to be stored in rpc_query table
RPC_CLIENT_REQUEST=CLIENT-REQUEST

# RPC client failed request topic (OPTIONAL)
# Default: CLIENT-FAILED-REQUEST
# Contains failed RPC command requests to be stored in rpc_query_failed table
RPC_CLIENT_FAILED_REQUEST=CLIENT-FAILED-REQUEST

# Core event log topic (OPTIONAL)
# Default: CoreEventLogTopic
# Contains system event logs to be stored in event_logs table
CORE_EVENT_LOG=CoreEventLogTopic

# Relayer state queue topic (OPTIONAL)
# Default: RelayerStateQueue
# Contains relayer state queue data to be stored in relayer_state_queue table
RELAYER_STATE_QUEUE=RelayerStateQueue

# ==============================================================================
# KAFKA CONSUMER GROUP CONFIGURATION
# ==============================================================================
# Consumer groups enable parallel processing and fault tolerance.
# Each consumer group tracks its own offset position in the topic.
# If not specified, the service will use the default consumer group names.

# Consumer group for RPC client requests (OPTIONAL)
# Default: RELAYER_KAFKA_SINK_GROUP_CLIENT_REQUEST
# Processes CLIENT-REQUEST topic with 5 worker threads
RELAYER_KAFKA_SINK_GROUP_CLIENT_REQUEST=RELAYER_KAFKA_SINK_GROUP_CLIENT_REQUEST

# Consumer group for failed RPC client requests (OPTIONAL)
# Default: RELAYER_KAFKA_SINK_GROUP_CLIENT_REQUEST_FAILED
# Processes CLIENT-FAILED-REQUEST topic with 2 worker threads
RELAYER_KAFKA_SINK_GROUP_CLIENT_REQUEST_FAILED=RELAYER_KAFKA_SINK_GROUP_CLIENT_REQUEST_FAILED

# Consumer group for core event logs (OPTIONAL)
# Default: RELAYER_KAFKA_SINK_GROUP_CORE_EVENT_LOG
# Processes CoreEventLogTopic with 5 worker threads
RELAYER_KAFKA_SINK_GROUP_CORE_EVENT_LOG=RELAYER_KAFKA_SINK_GROUP_CORE_EVENT_LOG

# Consumer group for relayer state queue (OPTIONAL)
# Default: RELAYER_KAFKA_SINK_GROUP_RELAYER_STATE_QUEUE
# Processes RelayerStateQueue topic with 2 worker threads
RELAYER_KAFKA_SINK_GROUP_RELAYER_STATE_QUEUE=RELAYER_KAFKA_SINK_GROUP_RELAYER_STATE_QUEUE

# ==============================================================================
# DEPLOYMENT NOTES
# ==============================================================================
# 
# 1. For production deployment, ensure:
#    - PostgreSQL is running and accessible
#    - Kafka cluster is running with all required topics created
#    - Database user has necessary permissions
#    - Network connectivity between services
#
# 2. The service uses the following thread pool configuration:
#    - RPC Client Pool: 5 workers (CLIENT-REQUEST)
#    - PSQL Client Failed Pool: 2 workers (CLIENT-FAILED-REQUEST)
#    - PSQL Pool: 5 workers (CoreEventLogTopic)
#    - Relayer State Queue Pool: 2 workers (RelayerStateQueue)
#
# 3. The service waits 10 seconds on startup for initialization
#    before beginning to consume messages
#
# 4. All message data is stored as JSON in the payload column
#    along with the Kafka message key and offset
